<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.screens.product.dao.sql.ProductDAO">

    <select id="getProductDetail" resultMap="getProductDetail" useCache="false">
        SELECT S.ProductId,
               CC.CategoryId,
               CN.CategoryName,
               S.ProductName,
               S.ImageURL,
               S.Description,
               S.CreatedTime,
               S.UpdatedTime,
               S.ReasonInactive,
               S.StatusId,
               TS.StatusName
        FROM tblProduct S
                 LEFT JOIN tblProductCategoryMapping CC ON(S.ProductId = CC.ProductId)
                 LEFT JOIN tblCategory CN ON(CC.CategoryId = CN.CategoryId)
                 LEFT JOIN tblStatus TS ON (S.StatusId = TS.StatusId)
        WHERE
            S.ProductId = #{productId}
    </select>

    <resultMap id="getProductDetail" type="ResponseProductDetailForm">
        <result property="productId" column="ProductId"/>
        <result property="productName" column="ProductName"/>
        <result property="imageUrl" column="ImageURL"/>
        <result property="description" column="Description"/>
        <result property="createdTime" column="CreatedTime"/>
        <result property="updatedTime" column="UpdatedTime"/>
        <result property="reasonInactive" column="ReasonInactive"/>
        <result property="statusId" column="StatusId"/>
        <result property="statusName" column="StatusName"/>
        <collection property="categories" ofType="CategoryResonseSupporter">
            <result property="categoryId" column="CategoryId"/>
            <result property="categoryName" column="CategoryName"/>
        </collection>
    </resultMap>

    <select id="getProductList" resultMap="getProductList" useCache="false">
        SELECT S.ProductId,
               CC.CategoryId,
               CN.CategoryName,
               S.ProductName,
               S.ImageURL,
               S.Description,
               S.CreatedTime,
               S.UpdatedTime,
               S.ReasonInactive,
               S.StatusId,
               TS.StatusName,
               TT.totalOfRecord
        FROM tblProduct S
                 LEFT JOIN tblProductCategoryMapping CC ON(S.ProductId = CC.ProductId)
                 LEFT JOIN tblCategory CN ON(CC.CategoryId = CN.CategoryId)
                 LEFT JOIN tblStatus TS ON (S.StatusId = TS.StatusId),
                (
                    SELECT COUNT(S.ProductId) AS totalOfRecord
                    FROM tblProduct S
                        <if test="categoryId != 0">
                            LEFT JOIN tblProductCategoryMapping CC ON(S.ProductId = CC.ProductId)
                            LEFT JOIN tblCategory CN ON(CC.CategoryId = CN.CategoryId)
                        </if>
                        LEFT JOIN tblStatus TS ON (S.StatusId = TS.StatusId)
                    <where>
                        <if test="searchValue != null">
                            <choose>
                                <when test="searchField == 'productname'">
                                    S.ProductName LIKE '%' #{searchValue} '%'
                                </when>
                                <otherwise>
                                    S.ProductName LIKE '%' #{searchValue} '%'
                                </otherwise>
                            </choose>
                        </if>
                        <choose>
                            <when test="statusId != 0">
                                AND S.StatusId = #{statusId}
                            </when>
                        </choose>
                        <choose>
                            <when test="categoryId != 0">
                                AND CC.CategoryId = #{categoryId}
                            </when>
                        </choose>
                    </where>

        ) TT
        <where>
            <if test="searchValue != null">
                <choose>
                    <when test="searchField == 'productname'">
                        S.ProductName LIKE '%' #{searchValue} '%'
                    </when>
                    <otherwise>
                        S.ProductName LIKE '%' #{searchValue} '%'
                    </otherwise>
                </choose>
            </if>
            <choose>
                <when test="statusId != 0">
                    AND S.StatusId = #{statusId}
                </when>
            </choose>
            <choose>
                <when test="categoryId != 0">
                    AND CC.CategoryId = #{categoryId}
                </when>
            </choose>
        </where>
        ORDER BY
        S.ProductName
        LIMIT
        #{offSet},
        #{fetchNext}
    </select>

    <resultMap id="getProductList" type="ResponseProductListForm">
        <result property="totalOfRecord" column="totalOfRecord"/>
        <collection property="products" ofType="ResponseProductDetailForm">
            <result property="productId" column="ProductId"/>
            <result property="productName" column="ProductName"/>
            <result property="imageUrl" column="ImageURL"/>
            <result property="description" column="Description"/>
            <result property="createdTime" column="CreatedTime"/>
            <result property="updatedTime" column="UpdatedTime"/>
            <result property="reasonInactive" column="ReasonInactive"/>
            <result property="statusId" column="StatusId"/>
            <result property="statusName" column="StatusName"/>
            <collection property="categories" ofType="CategoryResonseSupporter">
                <result property="categoryId" column="CategoryId"/>
                <result property="categoryName" column="CategoryName"/>
            </collection>
        </collection>
    </resultMap>

    <insert id="createProduct"  parameterType="ProductDTO">
        <selectKey keyProperty="productId" resultType="String" order="BEFORE">
            SELECT UUID() AS productId FROM tblProduct LIMIT 1
        </selectKey>
        INSERT INTO tblProduct (ProductId,ProductName, ImageURL, Description, CreatedTime,
                              UpdatedTime, StatusId)
        VALUES (#{productId} ,#{productName},
                #{imageUrl},
                #{description},
                convert_tz(now(),@@session.time_zone,'+07:00'),
                convert_tz(now(),@@session.time_zone,'+07:00'),
                #{statusId})
    </insert>

    <insert id="productAddCategory" parameterType="ProductDTO">
        INSERT INTO tblProductCategoryMapping (ProductId,CategoryId) values
        <foreach collection="categories" item="element" index="index" open="(" separator="),("  close=")">
              #{productId},#{element}
        </foreach>
    </insert>

    <select id="checkCategoriesValid" resultMap="checkCategoriesValid">
        SELECT COUNT(CategoryId) AS TotalOfRecord
        FROM tblCategory
        WHERE CategoryId IN
            <foreach collection="categories" item="element" index="index" open="(" separator=","  close=")">
                #{element}
            </foreach>
    </select>

    <resultMap id="checkCategoriesValid" type="ProductDTO">
        <result property="totalOfRecord" column="TotalOfRecord"/>
    </resultMap>

    <delete id="removeCategories" parameterType="ProductDTO">
        DELETE FROM tblProductCategoryMapping
        WHERE ProductId = #{productId}
    </delete>

    <insert id="addCategories" parameterType="ProductDTO">
        INSERT INTO tblProductCategoryMapping (ProductId,CategoryId) values
        <foreach collection="categories" item="element" index="index" open="(" separator="),("  close=")">
            #{productId},#{element}
        </foreach>
    </insert>

    <select id="checkProductExist" resultMap="checkProductExist">
        SELECT COUNT(ProductId) AS TotalOfRecord
        FROM tblProduct
        WHERE ProductId = #{productId}
    </select>

    <resultMap id="checkProductExist" type="ProductDTO">
        <result property="totalOfRecord" column="TotalOfRecord"/>
    </resultMap>

    <select id="getProductStatus" resultMap="getProductStatus" useCache="false">
        SELECT STA.StatusId FROM tblProduct STA WHERE STA.ProductId = #{productId}
    </select>

    <resultMap id="getProductStatus" type="ResponseProductDetailForm">
        <result property="statusId" column="StatusId"/>
    </resultMap>

    <select id="checkAnyStackHaveProduct" resultMap="checkAnyStackHaveProduct">
        SELECT COUNT(StackProductCameraMappingId) AS TotalOfRecord
        FROM tblStackProductCameraMapping
        WHERE ProductId = #{productId} AND (StatusId = 3 OR StatusId = 1)
    </select>

    <resultMap id="checkAnyStackHaveProduct" type="ProductDTO">
        <result property="totalOfRecord" column="TotalOfRecord"/>
    </resultMap>



    <update id="changeStatus" parameterType="ProductDTO">
        UPDATE tblProduct
        SET StatusId = #{statusId},
            ReasonInactive = #{reasonInactive},
            UpdatedTime = convert_tz(now(),@@session.time_zone,'+07:00')
        WHERE ProductId = #{productId}
    </update>

    <update id="updateInfo" parameterType="ProductDTO">
        UPDATE tblProduct
        SET
        <if test="productName != null">
            ProductName = #{productName},
        </if>
        <if test="imageUrl != null">
            ImageURL = #{imageUrl},
        </if>
        <if test="description != null">
            Description = #{description},
        </if>
        UpdatedTime = convert_tz(now(),@@session.time_zone,'+07:00')
        WHERE ProductId = #{productId}
    </update>

</mapper>





